USER MANUAL
===========
2014/02/21
Hoon H.






Getting Started
---------------
This is a minimal loop setup.

	class
	Foo1
	{
	public:
		Foo1()
		{
			//	Load media resources.
		}
		~Foo1()
		{
			//	Unload media resources.
		}
		auto
		step(Stepping const&) -> void
		{
			//	Perform stepping simulation and render media.
		}
	};
	
	int main(int, char**)
	{
		Eonil::Improvisations::MediaEngine::Application::run<Foo1>(argc, argv);
	}

The run function will create/step/delete the `Foo1` object.
All related media devices are all ready while the object is alive. So you can
follow RAII to manage resources.
Only one of `Foo1` instance will be made by the run function at a time and it 
will not copy or move the object. So you also can do this.

	class
	Foo1
	{
	public:
		Foo1(Foo1 const&) = delete;
		Foo1(Foo1&&) = delete;

		Foo1()
		{
			//	Load media resources.
		}
		~Foo1()
		{
			//	Unload media resources.
		}
		auto
		step(Stepping const&) -> void
		{
			//	Perform stepping simulation and render media.
		}
	};
	
	int main(int, char**)
	{
		Eonil::Improvisations::MediaEngine::Application::run<Foo1>(argc, argv);
	}


















Explanation and `Application` class
-----------------------------------
MediaEngine library is passive library, and doesn't require your main
application loop. Basically, you have to setup your application loop,
prepare OpenGL drawable surface, and call rendering method yourself. But
that's repeating and boring work, so I prepared convenient helper classes in
`Application` namespace.

The code will perform every platform specific operations for you. If the platform
supports quitting of programs, then this will return grafully by the program exit.
If the platform doesn't support exit, then this will not return. All the application
events such as foreground, background or hybernation will be handled correctly.

Application feature occupies some system features for proper handling. For example,
in iOS, `UIApplication`'s delegate will be set by this feature. So you shouldn't 
override the delegate object yourself. There can be more of this kind of hidden
gotchas, so you shouldn't use application part of your platform when using 
`Application` feature.

You can see source code of `Application` class to get idea of how to implement 
application even loop for each platforms. Anyway the implementation of 
`Application` isn't fixed, so can be changed at any time. If you really want to 
customize them, then fork the `Application` features.


*	Currently platform-specific features are provided via `Platform` class which
	is defined specifically for each platforms. See the class reference for details.









Note for OS X Application Xcode Project 
---------------------------------------
When you create OS X application project in Xcode 5, it will create default NIB
configuration for you. It contains pre-configured application-delegate, and that
will override application-delegate set by this `Application` class. So you have
to delete application-delegate configuration from the NIB file to make the 
`Application` class to work correctly. To do this, simply delete any NIB file
created by Xcode project template, and re-create whatever NIB your want.














Threading Note
--------------
OpenGL is designed in manner of server-client architecture. OpenGL is just
an API to access features on remote server, and there is no benefit to be
multi-threaded on client-side.

Consequently, all OpenGL functions are is designed to be single-threaded.
And naturally, `MediaEngine::Graphics` library became single-thread only 
API.

Anyway, there's an exception - the resource loading. You can load resources
parallelly using OpenGL API. But this require secondary GL context and shared
resource group feature. And controlling its operation is too complex, so I do
not support this feature now. Even if I do support this feature, the separated
thread control will be done in this library, so there will be no general multi-
threading support.

OpenGL is generally single threaded, but each platforms may have additional
behaviors. Refer your platform manuals for that. Note: iOS and OS X does not
have any extra threading cautions.












Tested Platforms
----------------
This doesn't mean all code is covered by test.

-	iMac 27-inch, Mid 2011 / AMD Radeon HD 6970M / OS X 10.8
-	iOS Simulator (5.1 ~ 7.0)

GPU can behave differently by platforms, drivers and vendors.
I tried to avoid any possible issues but still you may have
some troubles.









































Appendex 1 - Namespace Summary
------------------------------
It's is required to understand the role of each classes and how 
they are organized in namespaces.

-	`Eonil::Improvisations::MediaEngine::Graphics`

	Contains main high-level building blocks.
	Renderer, transform, camera and etc.
	These blocks may will move into proper namespace.
	
	This is high level framework which uses `Server` objects.
	Also, performs many optimizations silently under the hood.

-	`Eonil::Improvisations::MediaEngine::Graphics::Value`

	Contains commonly used value types.

-	`Eonil::Improvisations::MediaEngine::Graphics::Stub`

	Contains lowest-level OpenGL ES 2.0 stub functions.
	These stubs are set to detect all the errors at lowest level as much as possible.
	Performs parameter assertion, state based assertion. GL error assertion.
	All the assertions can be disabled by compiler flag.
	
	This is same level of bare bone precedural OpenGL API.

-	`Eonil::Improvisations::MediaEngine::Graphics::Server`

	Proxies to server-side graphics object.
	*Server* in OpenGL means GPU machine.
	These proxies are reference counted for optimization.
	
	These proxy objects effectlvely abstracts OpenGL API in pretty object-oriented manner.
	And because this is mostly direct abstraction, there's no hidden behavior. (such as 
	state shadowing) Every call will be executed without any frills. Primarily desigend 
	to provide very thin and honest object-oriented style abstraction layer.
	
	No resource proxy object will employ extra automatic ownership management. You need 
	to explicitly own any resources, and just pass them around the API. No shared ownership
	implied.

-	`Eonil::Improvisations::MediaEngine::Graphics::Resource`

	Client-side graphics data object.
	Graphics data usually need to be re-used, these are all shared object by
	reference-counting.

-	`Eonil::Improvisations::MediaEngine::Graphics::Transcoding`

	This is collection of editor/encoder/decoder. Because graphcis data in OpenGL are
	all exist highly optimized form, it's not easy to use in editor or for any other 
	purpose. This mades those works more easier.
	
	This also contains classes for importing/exporting of resources.
	
-	`Eonil::Improvisations::MediaEngine::Graphics::Form`

	Form is actual representation of specific shape in a space. Shapes are usually 
	defined by combining several resources which can be passed GPU part.

	Scene description is built by combining these forms.
	Forms are all independent values, but may share some static data over instances.
	(static data is usually `Resource`s).

	Renderer will finally render these forms.


-	`Eonil::Improvisations::MediaEngine::Graphics::Aliens`

	Provides features depending on external code - including platform native features.
	Currently, these features are included in this namespace.
	
		BulletPhysics (Multi-platform)
		CGImage (Apple/CoreGraphics)
		
	It is very hard to implement all the required features purely platform-agnostic ways.
	We need to adapt many platform specific, or external libraries, and this namespace
	is a space to collect them.
	
	It's very hard, and usually impossible to determine thread-safety and re-entrancy
	of alien code. So all the features in this namespace are thread-unsafe, non-reentrant.
	Also you should call them only from main thread. You need to manage any thread safety
	mechanism yourself.

	This library also contains some Objective-C classes for extra feature.



-	`Eonil::Improvisations::MediaEngine::Application`

	Contains convenient simple application framework.
	Also contains user-control responding features in `Eonil::Improvisations::MediaEngine::Controlling`
	namespace.
















