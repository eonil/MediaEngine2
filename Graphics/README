README
======
2013/06/15
Hoon H.










Building
--------

This library primarily supports iOS and Apportable for Android.
On those primary targets, it will be built without any additional work.

-	iOS: Just open Xcode project and build it.
-	Apportable for Android: Run `apportable` tool to build.
-	You need Clang 3.3+ at least.

If you need to port this source code into any other platforms, it would
probably painful because of no consideration. Anyway all source codes are
strictly following C99/C++11 syntax, so it would work on any standard 
conforming compilers. Here're my porting guide.


-	You need C99/C++11 support. I strongly recommend to use Clang 3.3+.
	Also, Objective-C support is required. Core game rendering and logics 
	are	written in C/C++, but any others - such as data-layer - are written
	in Objective-C for productivity. Currently Clang is the only compiler
	which support enough level of Objective-C support. Or you should rewrite
	all the codes in the parts.
	
	**OS X, Apportable for Android**: Just works.

	**Android**: Should work well with Clang compiler, but not tested.

	**HTML5**: Try Emscripten or Mandreel. Nothing is predictable currently.

	**Windows**: Use Clang if possible. Or use C99/C++11 supporting compilers
	such as ICC. I don't think MSVC has enough level of C99/C++11 support.
	
	Also you may need to strip off GCC extensions.

-	You will experience some issue due to lack of `GLKit`. GLKit is used
	only for optimization of vector/matrix operations. You can fallback to 
	`GLM` based code. This fallback will be added later, but not yet exist
	currently.

-	You need support for OpenGL ES 2.0 compatibility. Also GLSL ES 1.2(?)
	compatibility. On the desktop OpenGL, you can use Angle project to 
	translate GLSL programs.

	**OS X, Apportable for Android**: Just works.
	
	**Android**: Should work well with Clang compiler, but not tested.
	Some devices may report wrong GPU capabilities, and those cases are not
	considered.

	**HTML5**: Try Emscripten or Mandreel. Nothing is predictable currently.

	**Windows**: You may have trouble due to lack of enough level of OpenGL
	support. Try some OpenGL wrapper libraries such as [ANGLE][1].

	[1]:	http://code.google.com/p/angleproject/



















### **DEPRECATED INFORMATIONS FROM HERE** ###



`Eonil::Resource`
-----------------
Resource framework.
Resource framework is designed to be efficient by using memory mapped file.

This also offers foundational assemblies for executable embedded
metadata generated by toolset which is useful for scripting.







`Eonil::Improvisations::MediaEngine::Graphics::Stub`
-----------------------
Contains stub functions to OpenGL functions.
This is created to support automatic assertion by checking GL error.
And, this also performs low-level state based assertions in debug build.
Those heavy assertions will degrade performance a lot, so should be off
on release build.










`Eonil::Improvisations::MediaEngine::Graphics::Server`
-------------------------
Contains proxy object to resources in graphics server.
These objects are long-living objects designed in mostly precedural and
object-oriented style.

Parameter-less constructor will make an empty object - which does not have any backend
connection, so it's invalid state.




`Eonil::Improvisations::MediaEngine::Graphics`
-----------------
Functional style graphics rendering system. Written on top of 
`Eonil::Improvisations::MediaEngine::Graphics::Server`, offers functional way to render a scene by abstracting 
visual presentation as sequence of discrete graphics state stream.

This is not an hierarchical system. Because we don't need it. Whatever you render,
it should be in single space to be located correctly. It means you always need to
project transform of each objects into global space. This doesn't change even on 
skeletal models. What you need is global transform of all each bones, not thier 
local transforms. So, renderer supports only single flat single transform for single
flat space.

Anyway you can use `Space` and `Point` class to project local transforms into global
space. The classes are optimized for scene hierarchy, and will eliminate any possible
duplicated operation. This is just a helper utility class, and not required to render
a scene layer.

**Skeletal/Skinned Animation Rendering**

Skeletal/skinned animation needs resolving bone hierarchy. `Bone` class uses `Space`/
`Point` class pair to resolve its global transform. Also you have to use a material 
which supports `skeleton` slot semantic, and your vertex data must have a channel of
`bone influence` semantic. If your model doesn't have deformation by multiple bones,
and just uses only 1 bone for all each vertexes, it can be optimized by using simpler
shader.

**Point Sprite Rendering**

Point sprite is simplest, fastest particle implementation. Though it supports only
2D rotation/scale transform it's enough for many situations.

THIS STILL SUPPORTS TRANSFORM

http://klazuka.tumblr.com/post/249698151/point-sprites-and-opengl-es-2-0

**Particle Animation**

Particles are implemented in several ways. But this engine supports only limited set
of implementations.

-	Uniform billboards.
-	Static colored meshes.
-	Static textured meshes.
-	Animated dynamic colored meshes.
-	Animated dynamic textured meshes.

No skeletal animation is supported as particle

**UV Animation**

Many editors want UV animation. But anyway, UV animation doesn't need to be supported
in engine level. Whatever you want, UV animations essentially can be implemented with
some tricks of skeletal animation.

















