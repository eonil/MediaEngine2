NOTE
====
2013.06.09
Hoon H.









Goal and Non-goal
-----------------
This is very simple graphics engine.
Goal is supporting these featyres.

-	Single-pass rendering.
-	Flat textured shading.
-	Skinned by up to 4 bones.
	-	Automatic spliting into multiple subparts.
		-	For over bone limit.
-	Batched drawing with dynamic vertexes.
	-	Billboards.
	-	Point sprites.
-	Additive blending.
	-	Artistic approximation of emissive material.
		-	Billboard effect.
		-	Particle sprites.
		-	Some surface materials.
	-	Approximated, incorrect coloring adjusted by artist.
		-	If we can use multi-pass HDR rendering pipeline, we don't need this.
			-	We're targeting mid-low range power devices.
			-	Treat there's no HDR path virtually.

Any other enhanced features are non-goal.
Anyway, these features may be developed by situations
if possible.

-	Multi-pass rendering.
	-	Needs to describe relationship, usage and composition of passes.
	-	Too complex for declarative style.
	-	Just symbolize several multi-pass technique and make renderer to
		perform proper operations automatically.
		-	Resolve any required paths and data automatically.
		-	Cache used buffers automatically if required.
			-	Accumulation is automatic too.
	-	Controls machine state automatically.
		-	Depth, stencil, clearing, ...
		-	Just pass scene data.
		-	Layering and composition is meaningless.
			-	Compositor is just a internal object.
	-	Scene data must be drawing-order free.
		-	Only how and what to draw.
		-	Renderer selects drawing order.
		-	Any special treatment required must be symbolized.
			-	Group data and assign treatment symbol to let the rendere to know 
				how to handle it.
-	Dynamic lighting.
	-	Only on recent, proven hardwares.
		-	iPhone, iPad.
	-	Use color texture as stripped color without lighting.
		-	Incorrect... but no other way.
	-	Single ambience.
	-	Single directional.
	-	Saturation shift.
		-	Current textures are pre-desaturated for natural look without lightig.
		-	Lighting them means it will make umbras too.
			-	Both of lighted and umbra areas will be desaturated again.
				-	Because lack of subsurface scattering...
			-	Saturation sifting is required to get approximately intended color.
	-	Lighting needs phong shading.
		-	Do we have correct normals?
		-	How about hard edges?
	-	Issues.
		-	Too mnay thing to care for this.
			-	Really do we need this?
-	Transparent material.
	-	Use alpha channel for transparency.
-	Emissive material.
	-	Needs emission map.
		-	Emission color can be obtained from color map.
		-	Only intensity is required.
		-	Use alpha channel for intensity.
			-	Transparency and emission cannot co-exist.
	-	Needs bloom effect for correct appearance.
		-	Extra pass required.
		-	If GPU performance can cover this...
			-	Use blooming.
		-	Else
			-	Just render as is.
			
	-	We can approximate subsurface scattering with adjusted emissive material.
		-	Measure incoming light intensity, and reduce emission as the light intensity grows.
			-	Artistic approximation of subsurface scattering.

-	HDR environmental lighting.
	-	Do we need this?
-	Special effect for blade reflective trailing.
	-	Draw trailing with dynamic shape generated by shifting specified profile line.
	-	Several meterials for several style of items.
		-	Emissive material.
		-	Specular-like material.
	-	Rendered as very high brightness level.
		-	Motion blu will be applied.
-	Accumulative motion blur only for emissions.
	-	Separated or specially treated accumulation for blade trails.
	-	Needs special material for blades.

-	Map based shadow or SSAO.
	-	Whichever with acceptable performance.
		-	Needs multi-pass processing.




















These are non-goal. I noted these for later implementation.
-----------------------------------------------------------

-	Color Modeling

	Ultimately all colors should become RGB(A) for final screen display.
	Anyway sometimes we need to use another model such as RGBE, HSL or etc.
	More in-depth, photo-real style rendering will take spectral lighting
	model which describes electro-magnetic wave-length and energy, instead
	of approximated colors.

	One thing obvious is there's no single **generic** color model which 
	covers all. All models have thier own characters, attributes and 
	calculations methods. Each models are all different.

	So I intentionally avoided using of a color model. Although, `Vector4`
	structure supports `r, g, b, a` names, but it's just a conventional names
	rather than representing color model.

-	Compositor

	Full image synthesis can be described as a composition manner.
	Anyway building full composition graph is huge work, cannot be finished 
	without experiences. 
	


Bluring
-------
There are two kind of major bluring effect.
Focal lens blur and motion blur.

-	Focal lens blur.

	I think current best implementatio is this.
	
		http://www.youtube.com/watch?v=aDMuEAzUM5k
		
	Needs multiple passes.
	
-	Motion blur.

	The best looking motion blur is pixel based bluring which described here.
	
		http://www.slideshare.net/ozlael/motionblur-3252650
		
	This can be implemented in one post-processing.

	This has drawback that cannot handle depths well. 
	Anyway, depth-based decomposition can resolve this problem.
	We can use the decomposition method used in focal lens blur.
	



Global Illumination
-------------------
Reference papre here.

	http://maverick.inria.fr/Publications/2011/CNSGE11b/GIVoxels-pg2011-authors.pdf
	



Voxel based rendering
---------------------
Future game engine will all support voxel based rendering. As far as GI needs voxel information,
voel based rendering really suits to GI.





